from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import check_password_hash, generate_password_hash
from datetime import datetime
import qrcode
import io
import base64
import os
import uuid
from functools import wraps

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'ukr-drone-federation-secure-key-2024')
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:////tmp/pilots.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
app.config['PERMANENT_SESSION_LIFETIME'] = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
app.config['SESSION_COOKIE_SECURE'] = os.environ.get('FLASK_ENV') == 'production'  # True –¥–ª—è HTTPS –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
app.config['SESSION_COOKIE_HTTPONLY'] = True  # –ó–∞—â–∏—Ç–∞ –æ—Ç XSS
app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'  # –ó–∞—â–∏—Ç–∞ –æ—Ç CSRF

db = SQLAlchemy(app)

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not session.get('admin'):
            flash('‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ! –ù–µ–æ–±—Ö—ñ–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ', 'error')
            return redirect(url_for('admin_login'))
        return f(*args, **kwargs)
    return decorated_function

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞
def generate_next_participant_id():
    try:
        last_participant = Participant.query.order_by(Participant.id.desc()).first()
        if last_participant and hasattr(last_participant, 'participant_id') and last_participant.participant_id:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ UAV-0001
            last_number = int(last_participant.participant_id.split('-')[1])
            next_number = last_number + 1
        else:
            next_number = 1
    except:
        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞
        next_number = 1
    return f"UAV-{next_number:04d}"

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def generate_next_pilot_id():
    return generate_next_participant_id()

# –ù–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORIES = {
    'military': {
        'name': 'MILITARY',
        'emoji': 'üî¥',
        'color': '#FF6B6B',
        'subcategories': {
            'pilot_reconnaissance': '–≤—ñ–π—Å—å–∫–æ–≤—ñ –ø—ñ–ª–æ—Ç–∏ - —Ä–æ–∑–≤—ñ–¥—É–≤–∞–ª—å–Ω—ñ',
            'pilot_strike': '–≤—ñ–π—Å—å–∫–æ–≤—ñ –ø—ñ–ª–æ—Ç–∏ - —É–¥–∞—Ä–Ω—ñ',
            'instructor': '–≤—ñ–π—Å—å–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏',
            'engineer': '–≤—ñ–π—Å—å–∫–æ–≤—ñ —Ç–µ—Ö–Ω—ñ–∫–∏-—ñ–Ω–∂–µ–Ω–µ—Ä–∏',
            'operator': '–≤—ñ–π—Å—å–∫–æ–≤—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∏/—à—Ç—É—Ä–º–∞–Ω–∏',
            'federation_team': '–∫–æ–º–∞–Ω–¥–∞ —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó'
        }
    },
    'civil': {
        'name': 'CIVIL',
        'emoji': 'üîµ',
        'color': '#4A90E2',
        'subcategories': {
            'pilot': '—Ü–∏–≤—ñ–ª—å–Ω—ñ –ø—ñ–ª–æ—Ç–∏',
            'instructor': '—Ü–∏–≤—ñ–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∏',
            'engineer': '—Ü–∏–≤—ñ–ª—å–Ω—ñ —ñ–Ω–∂–µ–Ω–µ—Ä–∏-—Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∏',
            'student': '—Å—Ç—É–¥–µ–Ω—Ç–∏/–∫—É—Ä—Å–∞–Ω—Ç–∏',
            'federation_team': '–∫–æ–º–∞–Ω–¥–∞ —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó'
        }
    },
    'deftech': {
        'name': 'DEFTECH',
        'emoji': 'üü¢',
        'color': '#00D4AA',
        'subcategories': {
            'manufacturer': '–≤–∏—Ä–æ–±–Ω–∏–∫–∏ –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
            'drone_manufacturer': '–≤–∏—Ä–æ–±–Ω–∏–∫ –ë–ü–õ–ê',
            'developer': '—Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∏ —Å–æ—Ñ—Ç—É —Ç–∞ —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è',
            'rd_lab': 'R&D –ª–∞–±–æ—Ä–∞—Ç–æ—Ä—ñ—ó',
            'integrator': '—ñ–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∏ —Ç–∞ —Å–µ—Ä–≤—ñ—Å–Ω—ñ –∫–æ–º–ø–∞–Ω—ñ—ó',
            'federation_team': '–∫–æ–º–∞–Ω–¥–∞ —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó'
        }
    },
    'donor_partner': {
        'name': 'DONOR / PARTNER',
        'emoji': 'üü°',
        'color': '#F5A623',
        'subcategories': {
            'partner': '–ø–∞—Ä—Ç–Ω–µ—Ä–∏',
            'donor': '–º–µ—Ü–µ–Ω–∞—Ç–∏',
            'volunteer': '–≤–æ–ª–æ–Ω—Ç–µ—Ä–∏',
            'organization': '–æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó (–¥–µ—Ä–∂–∞–≤–Ω—ñ, –æ–±–ª–∞—Å–Ω—ñ —Ç–∞ —Ä–∞–π–æ–Ω–Ω—ñ –æ—Ä–≥–∞–Ω–∏ –≤–ª–∞–¥–∏, –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏)',
            'federation_team': '–∫–æ–º–∞–Ω–¥–∞ —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó'
        }
    },
    'media_education': {
        'name': 'MEDIA / EDUCATION',
        'emoji': 'üü£',
        'color': '#9B59B6',
        'subcategories': {
            'media_officer': '–º–µ–¥—ñ–∞-–æ—Ñ—ñ—Ü–µ—Ä–∏, SMM',
            'journalist': '–∂—É—Ä–Ω–∞–ª—ñ—Å—Ç–∏-–ø–∞—Ä—Ç–Ω–µ—Ä–∏',
            'educator': '–æ—Å–≤—ñ—Ç–Ω—ñ –∑–∞–∫–ª–∞–¥–∏, –≤–∏–∫–ª–∞–¥–∞—á—ñ',
            'researcher': '–¥–æ—Å–ª—ñ–¥–Ω–∏–∫–∏ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏',
            'federation_team': '–∫–æ–º–∞–Ω–¥–∞ —Ñ–µ–¥–µ—Ä–∞—Ü—ñ—ó'
        }
    }
}

# –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
class Participant(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    participant_id = db.Column(db.String(20), unique=True, nullable=False)  # UAV-0001 —Ñ–æ—Ä–º–∞—Ç
    callsign = db.Column(db.String(100), nullable=False, unique=True)
    photo_url = db.Column(db.String(200), default='default-pilot.svg')
    category = db.Column(db.String(50), nullable=False)  # 'military', 'civil', etc.
    subcategory = db.Column(db.String(100), nullable=False)  # –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
    join_date = db.Column(db.DateTime, default=datetime.now)
    points = db.Column(db.Integer, default=0)
    qr_code = db.Column(db.String(100), unique=True)
    is_active = db.Column(db.Boolean, default=True, nullable=False)  # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ID –∫–∞—Ä—Ç—ã
    
    def __repr__(self):
        return f'<Participant {self.callsign}>'
    
    def get_category_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return CATEGORIES.get(self.category, {})
    
    def get_subcategory_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        category_info = self.get_category_info()
        subcategories = category_info.get('subcategories', {})
        return subcategories.get(self.subcategory, self.subcategory)
    
    def is_pilot(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –ø–∏–ª–æ—Ç–æ–º (–¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ—á–∫–æ–≤ –∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞)"""
        return (self.category == 'military' and 
                self.subcategory in ['pilot_strike', 'pilot_reconnaissance']) or \
               (self.category == 'civil' and 
                self.subcategory == 'pilot')
    
    def get_pilot_category(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–∏–ª–æ—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        if self.subcategory == 'pilot_strike':
            return 'strike'
        elif self.subcategory == 'pilot_reconnaissance':
            return 'reconnaissance'
        return None

# –°—Ç–∞—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏)
class Pilot(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    pilot_id = db.Column(db.String(20), unique=True, nullable=False)  # UAV-0001 —Ñ–æ—Ä–º–∞—Ç
    callsign = db.Column(db.String(100), nullable=False, unique=True)
    photo_url = db.Column(db.String(200), default='default-pilot.svg')
    category = db.Column(db.String(50), nullable=False)  # 'strike' –∏–ª–∏ 'reconnaissance'
    join_date = db.Column(db.DateTime, default=datetime.now)
    points = db.Column(db.Integer, default=0)
    qr_code = db.Column(db.String(100), unique=True)
    
    def __repr__(self):
        return f'<Pilot {self.callsign}>'

class Achievement(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    # –î–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participant_id = db.Column(db.Integer, db.ForeignKey('participant.id'), nullable=True)
    # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–∏–ª–æ—Ç–æ–≤ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    pilot_id = db.Column(db.Integer, db.ForeignKey('pilot.id'), nullable=True)
    description = db.Column(db.String(200), nullable=False)
    points = db.Column(db.Integer, nullable=False)
    date_awarded = db.Column(db.DateTime, default=datetime.now)
    
    participant = db.relationship('Participant', backref=db.backref('achievements', lazy=True))
    pilot = db.relationship('Pilot', backref=db.backref('achievements', lazy=True))
    
    def get_owner(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (—É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –ø–∏–ª–æ—Ç–∞)"""
        return self.participant or self.pilot

# –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∫–∏
class AdminActivityLog(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    action_type = db.Column(db.String(50), nullable=False)  # 'add_participant', 'delete_participant', 'edit_participant', 'add_achievement'
    # –î–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participant_id = db.Column(db.Integer, db.ForeignKey('participant.id'), nullable=True)
    participant_name = db.Column(db.String(100), nullable=True)
    # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–∏–ª–æ—Ç–æ–≤ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    pilot_id = db.Column(db.Integer, db.ForeignKey('pilot.id'), nullable=True)
    pilot_name = db.Column(db.String(100), nullable=True)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –Ω–∞ —Å–ª—É—á–∞–π —É–¥–∞–ª–µ–Ω–∏—è –ø–∏–ª–æ—Ç–∞
    description = db.Column(db.String(300), nullable=False)
    points_awarded = db.Column(db.Integer, nullable=True)
    timestamp = db.Column(db.DateTime, default=datetime.now)
    
    participant = db.relationship('Participant', backref=db.backref('activity_logs', lazy=True))
    pilot = db.relationship('Pilot', backref=db.backref('activity_logs', lazy=True))
    
    def get_owner(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ª–æ–≥–∞ (—É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –ø–∏–ª–æ—Ç–∞)"""
        return self.participant or self.pilot
    
    def get_owner_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ª–æ–≥–∞"""
        return self.participant_name or self.pilot_name

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∫–∏
def log_admin_activity(action_type, participant=None, pilot=None, description=None, points_awarded=None):
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º participant
    if participant:
        participant_name = participant.callsign
        participant_id = participant.id
        pilot_name = None
        pilot_id = None
    elif pilot:
        participant_name = None
        participant_id = None
        pilot_name = pilot.callsign
        pilot_id = pilot.id
    else:
        participant_name = None
        participant_id = None
        pilot_name = None
        pilot_id = None
    
    log = AdminActivityLog(
        action_type=action_type,
        participant_id=participant_id,
        participant_name=participant_name,
        pilot_id=pilot_id,
        pilot_name=pilot_name,
        description=description,
        points_awarded=points_awarded
    )
    
    db.session.add(log)
    db.session.commit()

# –ú–∞—Ä—à—Ä—É—Ç—ã
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/rating')
def rating():
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∏–ª–æ—Ç–æ–≤ (–¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞)
    # –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏-–ø–∏–ª–æ—Ç—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç) - –≤–∫–ª—é—á–∞–µ–º –≤–æ–µ–Ω–Ω—ã—Ö –∏ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö
    new_strike_pilots = Participant.query.filter_by(category='military', subcategory='pilot_strike').order_by(Participant.points.desc()).all()
    new_recon_pilots = Participant.query.filter_by(category='military', subcategory='pilot_reconnaissance').order_by(Participant.points.desc()).all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö –ø–∏–ª–æ—Ç–æ–≤ (–æ–Ω–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –∫–∞–∫ —É–¥–∞—Ä–Ω—ã–µ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞)
    civil_pilots = Participant.query.filter_by(category='civil', subcategory='pilot').order_by(Participant.points.desc()).all()
    new_strike_pilots.extend(civil_pilots)
    
    # –ü–æ–ª—É—á–∞–µ–º QR –∫–æ–¥—ã –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    migrated_qr_codes = set()
    for pilot in new_strike_pilots + new_recon_pilots:
        if pilot.qr_code:
            migrated_qr_codes.add(pilot.qr_code)
    
    # –°—Ç–∞—Ä—ã–µ –ø–∏–ª–æ—Ç—ã (—Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã)
    old_strike_pilots = [p for p in Pilot.query.filter_by(category='strike').order_by(Pilot.points.desc()).all() 
                        if p.qr_code not in migrated_qr_codes]
    old_recon_pilots = [p for p in Pilot.query.filter_by(category='reconnaissance').order_by(Pilot.points.desc()).all() 
                       if p.qr_code not in migrated_qr_codes]
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–æ –æ—á–∫–∞–º
    strike_pilots = list(new_strike_pilots) + list(old_strike_pilots)
    strike_pilots.sort(key=lambda x: x.points, reverse=True)
    
    recon_pilots = list(new_recon_pilots) + list(old_recon_pilots)
    recon_pilots.sort(key=lambda x: x.points, reverse=True)
    
    all_pilots = strike_pilots + recon_pilots
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ –æ—á–∫–∞–º
    all_pilots.sort(key=lambda x: x.points, reverse=True)
    
    return render_template('rating.html', 
                         all_pilots=all_pilots,
                         strike_pilots=strike_pilots,
                         recon_pilots=recon_pilots)

@app.route('/pilot/<string:qr_code>')
def pilot_profile(qr_code):
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participant = Participant.query.filter_by(qr_code=qr_code).first()
    if participant:
        achievements = Achievement.query.filter_by(participant_id=participant.id).order_by(Achievement.date_awarded.desc()).all()
        
        # –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∏–ª–æ—Ç–æ–≤ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        all_strike_pilots = Participant.query.filter_by(category='military', subcategory='pilot_strike').order_by(Participant.points.desc()).all()
        all_recon_pilots = Participant.query.filter_by(category='military', subcategory='pilot_reconnaissance').order_by(Participant.points.desc()).all()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã—Ö –ø–∏–ª–æ—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        old_strike_pilots = Pilot.query.filter_by(category='strike').order_by(Pilot.points.desc()).all()
        old_recon_pilots = Pilot.query.filter_by(category='reconnaissance').order_by(Pilot.points.desc()).all()
        
        all_strike_pilots.extend(old_strike_pilots)
        all_recon_pilots.extend(old_recon_pilots)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –≤ —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏
        days_in_federation = (datetime.now() - participant.join_date).days
        
        return render_template('pilot_profile.html', 
                             pilot=participant,  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ pilot –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞
                             achievements=achievements,
                             all_strike_pilots=all_strike_pilots,
                             all_recon_pilots=all_recon_pilots,
                             days_in_federation=days_in_federation)
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏—â–µ–º —Å—Ä–µ–¥–∏ —Å—Ç–∞—Ä—ã—Ö –ø–∏–ª–æ—Ç–æ–≤
    pilot = Pilot.query.filter_by(qr_code=qr_code).first_or_404()
    achievements = Achievement.query.filter_by(pilot_id=pilot.id).order_by(Achievement.date_awarded.desc()).all()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    all_strike_pilots = Pilot.query.filter_by(category='strike').order_by(Pilot.points.desc()).all()
    all_recon_pilots = Pilot.query.filter_by(category='reconnaissance').order_by(Pilot.points.desc()).all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤-–ø–∏–ª–æ—Ç–æ–≤
    new_strike_pilots = Participant.query.filter_by(category='military', subcategory='pilot_strike').order_by(Participant.points.desc()).all()
    new_recon_pilots = Participant.query.filter_by(category='military', subcategory='pilot_reconnaissance').order_by(Participant.points.desc()).all()
    
    all_strike_pilots.extend(new_strike_pilots)
    all_recon_pilots.extend(new_recon_pilots)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –≤ —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏
    days_in_federation = (datetime.now() - pilot.join_date).days
    
    return render_template('pilot_profile.html', 
                         pilot=pilot, 
                         achievements=achievements,
                         all_strike_pilots=all_strike_pilots,
                         all_recon_pilots=all_recon_pilots,
                         days_in_federation=days_in_federation)

@app.route('/admin/login', methods=['GET', 'POST'])
def admin_login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        admin_username = os.environ.get('ADMIN_USERNAME', 'admin13')
        admin_password = os.environ.get('ADMIN_PASSWORD', 'admin1313')
        
        if username == admin_username and password == admin_password:
            session.permanent = True  # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–∞–π–º-–∞—É—Ç —Å–µ—Å—Å–∏–∏
            session['admin'] = True
            flash('–£—Å–ø–µ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!')
            return redirect(url_for('admin_dashboard'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞')
    
    return render_template('admin_login.html')

@app.route('/admin')
@admin_required
def admin_dashboard():
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    total_participants = Participant.query.count()
    total_pilots_old = Pilot.query.count()  # –°—Ç–∞—Ä—ã–µ –ø–∏–ª–æ—Ç—ã
    total_all = total_participants + total_pilots_old
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ä—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
    active_cards = Participant.query.filter_by(is_active=True).count()
    inactive_cards = Participant.query.filter_by(is_active=False).count()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    military_count = Participant.query.filter_by(category='military').count()
    civil_count = Participant.query.filter_by(category='civil').count()
    deftech_count = Participant.query.filter_by(category='deftech').count()
    donor_partner_count = Participant.query.filter_by(category='donor_partner').count()
    media_education_count = Participant.query.filter_by(category='media_education').count()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏–ª–æ—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    strike_pilots_old = Pilot.query.filter_by(category='strike').count()
    recon_pilots_old = Pilot.query.filter_by(category='reconnaissance').count()
    strike_pilots_new = Participant.query.filter_by(category='military', subcategory='pilot_strike').count()
    recon_pilots_new = Participant.query.filter_by(category='military', subcategory='pilot_reconnaissance').count()
    
    total_strike_pilots = strike_pilots_old + strike_pilots_new
    total_recon_pilots = recon_pilots_old + recon_pilots_new
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    all_participants = Participant.query.order_by(Participant.points.desc()).all()
    all_pilots_old = Pilot.query.order_by(Pilot.points.desc()).all()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º)
    all_members = list(all_participants) + list(all_pilots_old)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
    all_members_data = []
    
    # –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
    for participant in all_participants:
        member_data = {
            'id': participant.id,
            'participant_id': participant.participant_id,
            'callsign': participant.callsign,
            'category': participant.category,
            'subcategory': participant.subcategory,
            'points': participant.points,
            'photo_url': participant.photo_url,
            'join_date': participant.join_date.strftime('%d.%m.%Y'),
            'achievements': [{'description': ach.description, 'points': ach.points} for ach in participant.achievements],
            'type': 'participant'
        }
        all_members_data.append(member_data)
    
    # –°—Ç–∞—Ä—ã–µ –ø–∏–ª–æ—Ç—ã
    for pilot in all_pilots_old:
        member_data = {
            'id': pilot.id,
            'pilot_id': pilot.pilot_id,
            'callsign': pilot.callsign,
            'category': pilot.category,
            'subcategory': None,
            'points': pilot.points,
            'photo_url': pilot.photo_url,
            'join_date': pilot.join_date.strftime('%d.%m.%Y'),
            'achievements': [{'description': ach.description, 'points': ach.points} for ach in pilot.achievements],
            'type': 'pilot'
        }
        all_members_data.append(member_data)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_logs = AdminActivityLog.query.order_by(AdminActivityLog.timestamp.desc()).limit(20).all()
    
    return render_template('admin_dashboard.html', 
                         participants=all_participants,
                         pilots=all_pilots_old,  # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                         all_members=all_members_data,
                         total_all=total_all,
                         total_participants=total_participants,
                         total_pilots_old=total_pilots_old,
                         active_cards=active_cards,
                         inactive_cards=inactive_cards,
                         military_count=military_count,
                         civil_count=civil_count,
                         deftech_count=deftech_count,
                         donor_partner_count=donor_partner_count,
                         media_education_count=media_education_count,
                         total_strike_pilots=total_strike_pilots,
                         total_recon_pilots=total_recon_pilots,
                         categories=CATEGORIES,
                         activity_logs=activity_logs)

@app.route('/admin/participant/add', methods=['GET', 'POST'])
@admin_required
def admin_add_participant():
    
    if request.method == 'POST':
        callsign = request.form['callsign']
        category = request.form['category']
        subcategory = request.form['subcategory']
        photo_url = request.form.get('photo_url', 'default-pilot.svg')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR –∫–æ–¥ –∏ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞
        qr_code = str(uuid.uuid4())
        participant_id = generate_next_participant_id()
        
        participant = Participant(
            participant_id=participant_id,
            callsign=callsign,
            category=category,
            subcategory=subcategory,
            photo_url=photo_url,
            qr_code=qr_code
        )
        
        db.session.add(participant)
        db.session.commit()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º QR –∫–æ–¥ –≤ —Ñ–∞–π–ª
        save_participant_qr_code(participant)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        category_info = CATEGORIES.get(category, {})
        subcategory_name = category_info.get('subcategories', {}).get(subcategory, subcategory)
        
        log_admin_activity(
            action_type='add_participant',
            participant=participant,
            description=f'–î–æ–¥–∞–Ω–æ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞ {callsign} ({participant_id}) –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category_info.get("name", category)} - {subcategory_name}'
        )
        
        flash(f'–£—á–∞—Å–Ω–∏–∫ {callsign} (ID: {participant_id}) —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ')
        return redirect(url_for('admin_dashboard'))
    
    return render_template('admin_add_participant.html', categories=CATEGORIES)



@app.route('/admin/participant/<int:participant_id>/edit', methods=['GET', 'POST'])
@admin_required
def admin_edit_participant(participant_id):
    
    participant = Participant.query.get_or_404(participant_id)
    
    if request.method == 'POST':
        old_callsign = participant.callsign
        old_category = participant.category
        old_subcategory = participant.subcategory
        old_is_active = participant.is_active
        
        participant.callsign = request.form['callsign']
        participant.category = request.form['category']
        participant.subcategory = request.form['subcategory']
        participant.photo_url = request.form.get('photo_url', participant.photo_url)
        participant.is_active = 'is_active' in request.form  # Checkbox value
        
        db.session.commit()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        changes = []
        if old_callsign != participant.callsign:
            changes.append(f'–ø–æ–∑–∏–≤–Ω–∏–π: {old_callsign} ‚Üí {participant.callsign}')
        if old_category != participant.category:
            old_cat_info = CATEGORIES.get(old_category, {})
            new_cat_info = CATEGORIES.get(participant.category, {})
            changes.append(f'–∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {old_cat_info.get("name", old_category)} ‚Üí {new_cat_info.get("name", participant.category)}')
        if old_subcategory != participant.subcategory:
            old_subcat = CATEGORIES.get(old_category, {}).get('subcategories', {}).get(old_subcategory, old_subcategory)
            new_subcat = CATEGORIES.get(participant.category, {}).get('subcategories', {}).get(participant.subcategory, participant.subcategory)
            changes.append(f'–ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {old_subcat} ‚Üí {new_subcat}')
        if old_is_active != participant.is_active:
            status_text = "–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞" if participant.is_active else "–¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞"
            changes.append(f'ID –∫–∞—Ä—Ç–∞: {status_text}')
        
        if changes:
            log_admin_activity(
                action_type='edit_participant',
                participant=participant,
                description=f'–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —É—á–∞—Å–Ω–∏–∫–∞ {participant.callsign}: {", ".join(changes)}'
            )
        
        flash(f'–£—á–∞—Å–Ω–∏–∫ {participant.callsign} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ')
        return redirect(url_for('admin_dashboard'))
    
    return render_template('admin_edit_participant.html', participant=participant, categories=CATEGORIES)

@app.route('/admin/participant/<int:participant_id>/delete', methods=['POST'])
@admin_required
def admin_delete_participant(participant_id):
    
    participant = Participant.query.get_or_404(participant_id)
    participant_callsign = participant.callsign
    participant_participant_id = participant.participant_id
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    log_admin_activity(
        action_type='delete_participant',
        participant=participant,
        description=f'–í–∏–¥–∞–ª–µ–Ω–æ —É—á–∞—Å–Ω–∏–∫–∞ {participant_callsign} ({participant_participant_id})'
    )
    
    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    Achievement.query.filter_by(participant_id=participant_id).delete()
    
    db.session.delete(participant)
    db.session.commit()
    
    flash(f'–£—á–∞—Å–Ω–∏–∫ {participant_callsign} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ')
    return redirect(url_for('admin_dashboard'))

@app.route('/admin/participant/<int:participant_id>/add_achievement', methods=['POST'])
@admin_required
def admin_add_participant_achievement(participant_id):
    
    participant = Participant.query.get_or_404(participant_id)
    description = request.form['description']
    points = int(request.form.get('points', 0))  # –î–ª—è –Ω–µ-–ø–∏–ª–æ—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å 0
    
    achievement = Achievement(
        participant_id=participant_id,
        description=description,
        points=points
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –æ—á–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∏–ª–æ—Ç–æ–≤
    if participant.is_pilot() and points > 0:
        participant.points += points
    
    db.session.add(achievement)
    db.session.commit()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if points > 0:
        log_admin_activity(
            action_type='add_achievement',
            participant=participant,
            description=f'–ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è "{description}" –¥–ª—è —É—á–∞—Å–Ω–∏–∫–∞ {participant.callsign}',
            points_awarded=points
        )
    else:
        log_admin_activity(
            action_type='add_achievement',
            participant=participant,
            description=f'–î–æ–¥–∞–Ω–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è "{description}" –¥–ª—è —É—á–∞—Å–Ω–∏–∫–∞ {participant.callsign}'
        )
    
    flash(f'–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è {participant.callsign}')
    return redirect(url_for('admin_dashboard'))



@app.route('/admin/logout')
@admin_required
def admin_logout():
    session.pop('admin', None)
    return redirect(url_for('index'))



@app.route('/qr/<string:qr_code>')
def generate_qr(qr_code):
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ä–µ–¥–∏ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participant = Participant.query.filter_by(qr_code=qr_code).first()
    if participant:
        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É QR –∫–æ–¥–∞
        qr_filename = f"{participant.participant_id}.png"
        qr_filepath = os.path.join('static', 'qr_codes', qr_filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
        if not os.path.exists(qr_filepath):
            # –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥
            qr = qrcode.QRCode(version=1, box_size=10, border=2)
            qr.add_data(f'https://ufmup.com/pilot/{qr_code}')
            qr.make(fit=True)
            
            img = qr.make_image(fill_color="black", back_color="white")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            img.save(qr_filepath)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        return f'<img src="{url_for("static", filename=f"qr_codes/{qr_filename}")}" alt="QR Code for {participant.callsign}" style="width: 150px; height: 150px;">'
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏—â–µ–º —Å—Ä–µ–¥–∏ —Å—Ç–∞—Ä—ã—Ö –ø–∏–ª–æ—Ç–æ–≤
    pilot = Pilot.query.filter_by(qr_code=qr_code).first_or_404()
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É QR –∫–æ–¥–∞
    qr_filename = f"{pilot.pilot_id}.png"
    qr_filepath = os.path.join('static', 'qr_codes', qr_filename)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
    if not os.path.exists(qr_filepath):
        # –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥
        qr = qrcode.QRCode(version=1, box_size=10, border=2)
        qr.add_data(f'https://ufmup.com/pilot/{qr_code}')
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        img.save(qr_filepath)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    return f'<img src="{url_for("static", filename=f"qr_codes/{qr_filename}")}" alt="QR Code for {pilot.callsign}" style="width: 150px; height: 150px;">'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è QR –∫–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
def save_participant_qr_code(participant):
    qr_filename = f"{participant.participant_id}.png"
    qr_filepath = os.path.join('static', 'qr_codes', qr_filename)
    
    # –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥
    qr = qrcode.QRCode(version=1, box_size=10, border=2)
    qr.add_data(f'https://ufmup.com/pilot/{participant.qr_code}')  # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∞–π—Ç
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    img.save(qr_filepath)
    
    return qr_filename

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def save_pilot_qr_code(pilot):
    qr_filename = f"{pilot.pilot_id}.png"
    qr_filepath = os.path.join('static', 'qr_codes', qr_filename)
    
    # –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥
    qr = qrcode.QRCode(version=1, box_size=10, border=2)
    qr.add_data(f'https://ufmup.com/pilot/{pilot.qr_code}')
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    img.save(qr_filepath)
    
    return qr_filename

def migrate_database():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    print("–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏)
    db.create_all()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É participant_id –≤ —Ç–∞–±–ª–∏—Ü—É achievement
    try:
        db.session.execute(db.text("SELECT participant_id FROM achievement LIMIT 1"))
        print("–ö–æ–ª–æ–Ω–∫–∞ achievement.participant_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception:
        print("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É participant_id –≤ —Ç–∞–±–ª–∏—Ü—É achievement...")
        try:
            db.session.execute(db.text("ALTER TABLE achievement ADD COLUMN participant_id INTEGER"))
            db.session.commit()
            print("–ö–æ–ª–æ–Ω–∫–∞ achievement.participant_id —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ achievement.participant_id: {e}")
            db.session.rollback()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É admin_activity_log
    try:
        db.session.execute(db.text("SELECT participant_id FROM admin_activity_log LIMIT 1"))
        print("–ö–æ–ª–æ–Ω–∫–∞ admin_activity_log.participant_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception:
        print("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ participant_id –∏ participant_name –≤ —Ç–∞–±–ª–∏—Ü—É admin_activity_log...")
        try:
            db.session.execute(db.text("ALTER TABLE admin_activity_log ADD COLUMN participant_id INTEGER"))
            db.session.execute(db.text("ALTER TABLE admin_activity_log ADD COLUMN participant_name VARCHAR(100)"))
            db.session.commit()
            print("–ö–æ–ª–æ–Ω–∫–∏ admin_activity_log —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫ admin_activity_log: {e}")
            db.session.rollback()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É is_active –≤ —Ç–∞–±–ª–∏—Ü—É participant
    try:
        db.session.execute(db.text("SELECT is_active FROM participant LIMIT 1"))
        print("–ö–æ–ª–æ–Ω–∫–∞ participant.is_active —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except Exception:
        print("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É is_active –≤ —Ç–∞–±–ª–∏—Ü—É participant...")
        try:
            db.session.execute(db.text("ALTER TABLE participant ADD COLUMN is_active BOOLEAN DEFAULT 1"))
            db.session.commit()
            print("–ö–æ–ª–æ–Ω–∫–∞ participant.is_active —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–∫–∏ participant.is_active: {e}")
            db.session.rollback()

def migrate_pilots_to_participants():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∏–ª–æ—Ç–æ–≤ –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    print("–ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–∏–ª–æ—Ç–æ–≤ –≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
    
    # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    migrate_database()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ pilot
    try:
        pilots_data = db.session.execute(db.text("""
            SELECT id, pilot_id, callsign, photo_url, category, join_date, points, qr_code 
            FROM pilot
        """)).fetchall()
    except Exception:
        print("–¢–∞–±–ª–∏—Ü–∞ pilot –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é")
        return
    
    migrated_count = 0
    
    for pilot_row in pilots_data:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–∏–ª–æ—Ç
        existing_participant = Participant.query.filter_by(qr_code=pilot_row.qr_code).first()
        if existing_participant:
            print(f"–ü–∏–ª–æ—Ç {pilot_row.callsign} —É–∂–µ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if pilot_row.category == 'strike':
            subcategory = 'pilot_strike'
        elif pilot_row.category == 'reconnaissance':
            subcategory = 'pilot_reconnaissance'
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–∏–ª–æ—Ç–∞ {pilot_row.callsign}: {pilot_row.category}")
            continue
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ datetime –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        join_date = pilot_row.join_date
        if isinstance(join_date, str):
            from datetime import datetime
            try:
                join_date = datetime.fromisoformat(join_date.replace('Z', '+00:00'))
            except:
                join_date = datetime.now()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = Participant(
            participant_id=pilot_row.pilot_id,
            callsign=pilot_row.callsign,
            photo_url=pilot_row.photo_url,
            category='military',  # –í—Å–µ –ø–∏–ª–æ—Ç—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ –≤–æ–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            subcategory=subcategory,
            join_date=join_date,
            points=pilot_row.points,
            qr_code=pilot_row.qr_code
        )
        
        db.session.add(participant)
        db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL
        achievements_data = db.session.execute(db.text("""
            SELECT id, description, points, date_awarded 
            FROM achievement 
            WHERE pilot_id = :pilot_id
        """), {"pilot_id": pilot_row.id}).fetchall()
        
        for achievement_row in achievements_data:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            date_awarded = achievement_row.date_awarded
            if isinstance(date_awarded, str):
                try:
                    date_awarded = datetime.fromisoformat(date_awarded.replace('Z', '+00:00'))
                except:
                    date_awarded = datetime.now()
            
            new_achievement = Achievement(
                participant_id=participant.id,
                description=achievement_row.description,
                points=achievement_row.points,
                date_awarded=date_awarded
            )
            db.session.add(new_achievement)
        
        migrated_count += 1
        print(f"–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –ø–∏–ª–æ—Ç: {pilot_row.callsign} -> {participant.category}/{participant.subcategory}")
    
    if migrated_count > 0:
        db.session.commit()
        print(f"–ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {migrated_count} –ø–∏–ª–æ—Ç–æ–≤")
    else:
        print("–ù–µ—Ç –ø–∏–ª–æ—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs('/tmp', exist_ok=True)
    os.makedirs('static/qr_codes', exist_ok=True)
    
    with app.app_context():
        db.create_all()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∏–ª–æ—Ç–æ–≤
        migrate_pilots_to_participants()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if Pilot.query.count() == 0 and Participant.query.count() == 0:
            test_participants = [
                {
                    'participant_id': 'UAV-0001',
                    'callsign': '–û—Ä–µ–ª',
                    'category': 'military',
                    'subcategory': 'pilot_strike',
                    'photo_url': 'default-pilot.svg',
                    'points': 1250,
                    'qr_code': str(uuid.uuid4())
                },
                {
                    'participant_id': 'UAV-0002',
                    'callsign': '–°–æ–∫–æ–ª',
                    'category': 'military',
                    'subcategory': 'pilot_reconnaissance',
                    'photo_url': 'default-pilot.svg',
                    'points': 980,
                    'qr_code': str(uuid.uuid4())
                },
                {
                    'participant_id': 'UAV-0003',
                    'callsign': '–ë–µ—Ä–∫—É—Ç',
                    'category': 'military',
                    'subcategory': 'pilot_strike',
                    'photo_url': 'default-pilot.svg',
                    'points': 1400,
                    'qr_code': str(uuid.uuid4())
                },
                {
                    'participant_id': 'UAV-0004',
                    'callsign': '–Ø—Å—Ç—Ä–µ–±',
                    'category': 'military',
                    'subcategory': 'pilot_reconnaissance',
                    'photo_url': 'default-pilot.svg',
                    'points': 1120,
                    'qr_code': str(uuid.uuid4())
                },
                {
                    'participant_id': 'UAV-0005',
                    'callsign': '–Ü–Ω–∂–µ–Ω–µ—Ä-01',
                    'category': 'deftech',
                    'subcategory': 'developer',
                    'photo_url': 'default-pilot.svg',
                    'points': 850,
                    'qr_code': str(uuid.uuid4())
                },
                {
                    'participant_id': 'UAV-0006',
                    'callsign': '–¶–∏–≤—ñ–ª-01',
                    'category': 'civil',
                    'subcategory': 'instructor',
                    'photo_url': 'default-pilot.svg',
                    'points': 650,
                    'qr_code': str(uuid.uuid4())
                }
            ]
            
            for participant_data in test_participants:
                participant = Participant(**participant_data)
                db.session.add(participant)
            
            db.session.commit()
            
            # –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for participant in Participant.query.all():
                save_participant_qr_code(participant)
            
            print("–¢–µ—Å—Ç–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —Å QR –∫–æ–¥–∞–º–∏")
    
    port = int(os.environ.get('PORT', 5000))
    debug = os.environ.get('FLASK_ENV') != 'production'
    app.run(host='0.0.0.0', port=port, debug=debug)
